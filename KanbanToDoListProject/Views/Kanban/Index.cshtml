@model IEnumerable<KanbanToDoListProject.Models.TaskItem>

<div class="container">
    <!-- Formulário de Adição de Tarefa -->
    <form id="add-task-form" method="post" action="/Kanban/AddTask" class="task-form-inline">
        @Html.AntiForgeryToken()
        <div class="form-row">
            <div class="form-group">
                <label for="title">Título:</label>
                <input type="text" id="title" name="Title" class="form-control" required />
            </div>
            <div class="form-group">
                <label for="description">Descrição:</label>
                <textarea id="description" name="Description" class="form-control description" required></textarea>
            </div>
            <div class="form-group">
                <label for="status">Status:</label>
                <select id="status" name="Status" class="form-control" required>
                    <option value="ToDo">ToDo</option>
                    <option value="InProgress">InProgress</option>
                    <option value="Done">Done</option>
                </select>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Adicionar</button>
            </div>
        </div>
    </form>

    <!-- Kanban Board -->
    <div class="kanban-board">
        <div class="kanban-column">
            <h2>Pendente</h2>
            <div id="ToDo" class="kanban-tasks">
                @foreach (var task in Model.Where(t => t.Status == "ToDo"))
                {
                    <div class="kanban-task" data-id="@task.Id">
                        <h4>@task.Title</h4>
                        <p>@task.Description</p>
                        <span class="task-date">Criado em: @task.CreatedAt.ToString("dd/MM/yyyy")</span>
                        <button class="btn btn-secondary btn-sm edit-btn" data-id="@task.Id">Editar</button>
                    </div>
                }
            </div>
        </div>

        <div class="kanban-column">
            <h2>Em Progresso</h2>
            <div id="InProgress" class="kanban-tasks">
                @foreach (var task in Model.Where(t => t.Status == "InProgress"))
                {
                    <div class="kanban-task" data-id="@task.Id">
                        <h4>@task.Title</h4>
                        <p>@task.Description</p>
                        <span class="task-date">Criado em: @task.CreatedAt.ToString("dd/MM/yyyy")</span>
                        <button class="btn btn-secondary btn-sm edit-btn" data-id="@task.Id">Editar</button>
                    </div>
                }
            </div>
        </div>

        <div class="kanban-column">
            <h2>Feito</h2>
            <div id="Done" class="kanban-tasks">
                @foreach (var task in Model.Where(t => t.Status == "Done"))
                {
                    <div class="kanban-task" data-id="@task.Id">
                        <h4>@task.Title</h4>
                        <p>@task.Description</p>
                        <span class="task-date">Criado em: @task.CreatedAt.ToString("dd/MM/yyyy")</span>
                        <button class="btn btn-secondary btn-sm edit-btn" data-id="@task.Id">Editar</button>

                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal de Edição -->
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Editar Tarefa</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="edit-task-form" method="post" action="/Kanban/UpdateTask">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="edit-task-id" name="Id" />
                    <div class="form-group">
                        <label for="edit-title">Título:</label>
                        <input type="text" id="edit-title" name="Title" class="form-control" required />
                    </div>
                    <div class="form-group">
                        <label for="edit-description">Descrição:</label>
                        <textarea id="edit-description" name="Description" class="form-control descriptiontwo" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="edit-status">Status:</label>
                        <select id="edit-status" name="Status" class="form-control" required>
                            <option value="ToDo">ToDo</option>
                            <option value="InProgress">InProgress</option>
                            <option value="Done">Done</option>
                        </select>
                    </div>
                    <p>&nbsp;</p>
                    <button type="submit" class="btn btn-primary">Salvar</button>
                    <button type="button" id="delete-task-btn" class="btn btn-danger">Apagar</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Inclua o SortableJS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Opções para o sortable
        const sortableOptions = {
            group: 'kanban',
            animation: 150,
            onEnd: function (evt) {
                const taskId = evt.item.getAttribute('data-id');
                const newStatus = evt.to.id;

                fetch('/Kanban/UpdateTaskStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ id: taskId, status: newStatus })
                })
                    .then(response => response.json())
                    .then(data => console.log(data))
                    .catch(error => console.error('Error:', error));
            }
        };

        // Inicializar sortable para cada coluna
        Sortable.create(document.getElementById('ToDo'), sortableOptions);
        Sortable.create(document.getElementById('InProgress'), sortableOptions);
        Sortable.create(document.getElementById('Done'), sortableOptions);

        // Evento para abrir o modal de edição
        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', () => {
                const taskId = button.getAttribute('data-id');
                const taskElement = button.closest('.kanban-task');
                const title = taskElement.querySelector('h4').textContent;
                const description = taskElement.querySelector('p').textContent;
                const status = taskElement.closest('.kanban-column').querySelector('h2').textContent.trim();

                document.getElementById('edit-task-id').value = taskId;
                document.getElementById('edit-title').value = title;
                document.getElementById('edit-description').value = description;
                document.getElementById('edit-status').value = status;

                // Mostrar o modal
                const editModal = new bootstrap.Modal(document.getElementById('editModal'));
                editModal.show();
            });
        });

        // Evento para enviar o formulário de edição
        document.getElementById('edit-task-form').addEventListener('submit', (event) => {
            event.preventDefault(); // Previne o comportamento padrão de envio do formulário

            const formData = new FormData(event.target);
            const data = {
                Id: formData.get('Id'),
                Title: formData.get('Title'),
                Description: formData.get('Description'),
                Status: formData.get('Status')
            };

            fetch('/Kanban/UpdateTask', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Atualiza a tarefa na interface
                        const taskElement = document.querySelector(`.kanban-task[data-id="${data.Id}"]`);
                        if (taskElement) {
                            taskElement.querySelector('h4').textContent = data.Title;
                            taskElement.querySelector('p').textContent = data.Description;
                            taskElement.querySelector('span.task-date').textContent = `Status: ${data.Status}`;
                        }

                        // Fechar o modal
                        const editModal = bootstrap.Modal.getInstance(document.getElementById('editModal'));
                        if (editModal) {
                            editModal.hide();
                        }

                        // Opcional: Recarregar a página
                        // window.location.reload();
                    } else {
                        alert('Erro ao atualizar a tarefa.');
                    }
                })
                .catch(error => console.error('Error:', error));
        });

        // Evento para deletar a tarefa
        document.getElementById('delete-task-btn').addEventListener('click', () => {
            const taskId = document.getElementById('edit-task-id').value;

            fetch(`/Kanban/DeleteTask/${taskId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Remove a tarefa da interface
                        const taskElement = document.querySelector(`.kanban-task[data-id="${taskId}"]`);
                        if (taskElement) {
                            taskElement.remove();
                        }

                        // Fechar o modal
                        const editModal = bootstrap.Modal.getInstance(document.getElementById('editModal'));
                        if (editModal) {
                            editModal.hide();
                        }
                    } else {
                        alert('Erro ao apagar a tarefa: ' + data.message);
                    }
                })
                .catch(error => console.error('Error:', error));
        });
    });
</script>

<!-- CSS para layout -->
<style>
    .task-form-inline {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 20px;
        flex-wrap: wrap;
    }

    .form-row {
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        flex: 1;
    }

    .form-group label {
        margin-bottom: 5px;
    }

    .form-control {
        min-width: 150px;
    }

    .description {
        min-width: 600px; /* Ajuste a largura conforme necessário */
        height: 35px; /* Ajuste a altura conforme necessário */
    }

    .descriptiontwo {
        min-width: 100%; /* Ajuste a largura conforme necessário */
        height: 70px; /* Ajuste a altura conforme necessário */
    }

    .btn-primary {
        white-space: nowrap;
    }

    .kanban-board {
        display: flex;
        gap: 20px;
        overflow-x: auto; /* Adiciona rolagem horizontal se necessário */
    }

    .kanban-column {
        flex: 1;
        min-width: 200px; /* Ajuste o valor conforme necessário */
        background-color: #f4f4f4;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
    }

    .kanban-task {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 3px;
        padding: 10px;
        margin-bottom: 10px;
        box-shadow: 0 0 3px rgba(0, 0, 0, 0.1);
    }
    /* Ajuste o tamanho da modal */
    .modal-dialog {
        max-width: 500px; /* Ajuste conforme necessário */
        width: 90%; /* Largura responsiva */
    }

    /* Ajuste o textarea dentro da modal */
    .modal-content {
        display: flex;
        flex-direction: column;
    }

    .modal-body {
        display: flex;
        flex-direction: column;
    }

    textarea {
        width: 100%;
        height: 100px; /* Ajuste a altura conforme necessário */
        box-sizing: border-box; /* Garante que o padding e a borda sejam incluídos na largura e altura */
        resize: vertical; /* Permite redimensionar verticalmente se necessário */
    }
</style>
